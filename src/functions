#!/bin/bash

######################
# INTERNAL FUNCTIONS #
######################
_increment_ext_ip_refresh_counter() {
   export ext_ip_refresh_counter=$((ext_ip_refresh_counter+1))
}

_ready_to_get_external_ip() {
   if (( (ext_ip_refresh_counter % EXT_IP_REFRESH) == 0 )); then
      return 0
   else
      return 1
   fi
}

######################
# EXTERNAL FUNCTIONS #
######################

#########
# SETUP #
#########
assign_current_script_to_cpu0() {
  pid_of_current_script=$$
  taskset -cp 1 $pid_of_current_script
}

setup_lcd_as_output() {
  exec > >(tee "/dev/tty$OUTPUT_CONSOLE") 2>&1
}

disable_lcd_sleep() {
  frame_buffer_sleep_time_mins=0
  echo -e "\033[9;$frame_buffer_sleep_time_mins]"
}

set_console_font() {
  setfont "$CONSOLE_FONT"
}

disable_terminal_cursor() {
  setterm -cursor off
}

initial_setup() {
  assign_current_script_to_cpu0
  setup_lcd_as_output
  disable_lcd_sleep
  set_console_font
  disable_terminal_cursor
}

update_tty_view() {
  # chvt = "change foreground virtual terminal"
  chvt "$OUTPUT_CONSOLE"
}

#################
# PRINTOUT DATA #
#################
get_external_ip() {
   export EXTERNAL_IP=$(/usr/bin/curl -s http://mdrjr.net/ip.php)
}
export -f get_external_ip

get_full_date() {
   export DATE=$(date +"%Y-%m-%d %H:%M:%S")
}
export -f get_full_date

get_hostname() {
   export HOSTNAME=$(hostname)
}
export -f get_hostname

get_os_distributor() {
   export OS_DISTRIBUTOR=$(lsb_release -i | awk '{ print $3 }')
}
export -f get_os_distributor

get_internal_ip() {
   export INTERNAL_IP=$(hostname -I | cut -d ' ' -f 1)
}
export -f get_internal_ip

get_ethernet_speed() {
   export SPEED_ETH0=$(cat /sys/class/net/eth*/speed)
}
export -f get_ethernet_speed

get_net_tx_rx_realtime() {
   local net_txrx=($(sar -n DEV 1 1 | awk '$2 == "'$NETIF'" {printf "%.1f %.1f", $5/1024, $6/1024; exit;}'))
   export NET_TX=${net_txrx[0]}
   export NET_RX=${net_txrx[1]}
}
export -f get_net_tx_rx_realtime

get_disk_mount_info() {
   SATA=($(awk '/^\/dev\/[ms]d/ {printf "%s ", $1}' /proc/mounts))
}
export -f get_disk_mount_info

get_disk_info() {
   local t=$(df -h)
   local iostat=$(iostat -y -m 1 1)

   for i in "${!SATA[@]}"
   do
      # escape / --> \/
      escaped_regex="${SATA[$i]//\//\\/}"
      #DISK_SIZE[$i]=$(echo "$t" | awk '/^'"$escaped_regex"'/ {print $2}')
      DISK_USED[$i]=$(echo "$t" | awk '/^'"$escaped_regex"'/ {print $3}')
      DISK_FREE[$i]=$(echo "$t" | awk '/^'"$escaped_regex"'/ {print $4}')
      DISK_USED_PCT[$i]=$(echo "$t" | awk '/^'"$escaped_regex"'/ {print $5}')

      local SAT=$(expr "${SATA[$i]#"/dev/"}" : '\([a-z]*\)')
      DISK_R[$i]=$(echo "$iostat" | awk '/^'"$SAT"'/ {print $3}')
      DISK_W[$i]=$(echo "$iostat" | awk '/^'"$SAT"'/ {print $4}')
   done
}
export -f get_disk_info

get_disk_temperature() {
   for i in "${!SATA[@]}"
   do
      # declare and assign variable seperately to avoid masking return value
      DISK_TEMP[$i]=" (IDLE)"
      if (( ${DISK_R[$i]%.*} > 0 )) || (( ${DISK_W[$i]%.*} > 0 ))
      then

         local t
         t=$(smartctl -a "${SATA[$i]}" -d sat | grep "Temp")
         if (( $? == 0 ))
         then
            local temp=$(echo $t | awk '{print $10}')
            DISK_TEMP[$i]="${CRED} Temp: $temp$TEMPERATURE_FORMAT"
         else
            DISK_TEMP[$i]=""
         fi
      fi
   done
}
export -f get_disk_temperature

get_memory_info() {
   # in Mbytes
   export MEM_AVAILABLE=$(awk '/^MemAvailable:/ {printf "%d", $2/1024}' /proc/meminfo)
   export MEM_TOTAL=$(awk '/^MemTotal:/ {printf "%d", $2/1024}' /proc/meminfo)
   export MEM_USED=$((MEM_TOTAL - MEM_AVAILABLE))
}
export -f get_memory_info

get_system_info() {
   export UBUNTU_VERSION=$(lsb_release -r | awk '{print $2}')
   export KERNEL_VERSION=$(uname -r | awk -F "-" '{print $1}')
}
export -f get_system_info

get_cpu_usage() { 
   export CPU_USAGE=$(mpstat 1 1 | awk '/Average/ {printf "%.1f", 100-$12}')
}
export -f get_cpu_usage

get_cpu_clock() {
   speed_a7=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq)
   speed_a15=$(cat /sys/devices/system/cpu/cpu4/cpufreq/scaling_cur_freq)
   export SPEED_CPU_A7="$((speed_a7/1000))"
   export SPEED_CPU_A15="$((speed_a15/1000))"
}
export -f get_cpu_clock

get_cpu_temperature() {
   _t=$(($(</sys/class/thermal/thermal_zone0/temp) / 1000))
   if [ "$TEMPERATURE_FORMAT" = "C" ]; then
      export CPU_TEMP="$_t"C
   else
      _t1=$((_t * 9 / 5 + 32))
      export CPU_TEMP="$_t1"F
   fi
}
export -f get_cpu_temperature

get_samba_connections() {
   if [ ! -f /usr/bin/smbstatus ]; then
      export SAMBA_CONNECTIONS=0
   else
      export SAMBA_CONNECTIONS=$(smbstatus -b | grep -c ipv)
   fi
}
export -f get_samba_connections

get_nfs_connections() { 
   export NFS_CONNECTIONS=$(netstat -an | grep 2049 | grep -c ESTA)
}
export -f get_nfs_connections

get_process_count() { 
   export PROCESS_COUNT=$(ps xa | wc -l)
}
export -f get_process_count

get_all_data() {
   get_internal_ip
   get_ethernet_speed
   get_hostname
   get_os_distributor
   get_disk_mount_info
   get_disk_info
   get_disk_temperature
   get_full_date
   #get_net_tx_rx_realtime
   #get_memory_info
   get_system_info
   get_cpu_clock
   get_cpu_usage
   get_cpu_temperature
   #get_samba_connections
   #get_nfs_connections
   #get_process_count

   if _ready_to_get_external_ip; then
      get_external_ip
   fi
   _increment_ext_ip_refresh_counter
}
export -f get_all_data